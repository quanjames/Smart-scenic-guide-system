{"ast":null,"code":"import axios from 'axios';\nconst request = axios.create({\n  baseURL: '/api',\n  timeout: 5000\n});\n\n// request 拦截器\n// 可以自请求发送前对请求做一些处理\n// 比如统一加token，对请求参数统一加密\nrequest.interceptors.request.use(config => {\n  config.headers['Content-Type'] = 'application/json;charset=utf-8';\n  let user = localStorage.getItem(\"user\") ? JSON.parse(localStorage.getItem(\"user\")) : {};\n  if (user) {\n    config.headers['token'] = user.token; // 设置请求头\n  }\n\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// response 拦截器\n// 可以在接口响应后统一处理结果\nrequest.interceptors.response.use(response => {\n  let res = response.data;\n  // 如果是返回的文件\n  if (response.config.responseType === 'blob') {\n    return res;\n  }\n  // 兼容服务端返回的字符串数据\n  if (typeof res === 'string') {\n    res = res ? JSON.parse(res) : res;\n  }\n  return res;\n}, error => {\n  console.log('err' + error); // for debug\n  return Promise.reject(error);\n}, new Promise(function (resolve, reject) {\n  reject('该prormise已被拒绝');\n}).catch(function (reason) {\n  console.log('catch:', reason);\n}));\n// 当权限验证不通过的时候给出提示\nif (res.code === '401') {\n  ElementUI.Message({\n    message: res.msg,\n    type: 'error'\n  });\n}\nexport default request;","map":{"version":3,"names":["axios","request","create","baseURL","timeout","interceptors","use","config","headers","user","localStorage","getItem","JSON","parse","token","error","Promise","reject","response","res","data","responseType","console","log","resolve","catch","reason","code","ElementUI","Message","message","msg","type"],"sources":["F:/idea_Project_2023/design_3/project/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\r\n\r\nconst request = axios.create({\r\n    baseURL: '/api',\r\n    timeout: 5000\r\n})\r\n\r\n// request 拦截器\r\n// 可以自请求发送前对请求做一些处理\r\n// 比如统一加token，对请求参数统一加密\r\nrequest.interceptors.request.use(config => {\r\n    config.headers['Content-Type'] = 'application/json;charset=utf-8';\r\n    let user = localStorage.getItem(\"user\") ?JSON.parse(localStorage.getItem(\"user\")):{}\r\n    if(user){\r\n        config.headers['token'] = user.token;  // 设置请求头\r\n    }\r\n\r\n    return config\r\n}, error => {\r\n    return Promise.reject(error)\r\n});\r\n\r\n// response 拦截器\r\n// 可以在接口响应后统一处理结果\r\nrequest.interceptors.response.use(\r\n    response => {\r\n        let res = response.data;\r\n        // 如果是返回的文件\r\n        if (response.config.responseType === 'blob') {\r\n            return res\r\n        }\r\n        // 兼容服务端返回的字符串数据\r\n        if (typeof res === 'string') {\r\n            res = res ? JSON.parse(res) : res\r\n        }\r\n        return res;\r\n    },\r\n    error => {\r\n        console.log('err' + error) // for debug\r\n        return Promise.reject(error)\r\n    },\r\n\r\n    new Promise(function(resolve, reject) {\r\n        reject('该prormise已被拒绝');\r\n    }).catch(function(reason) {\r\n        console.log('catch:', reason);\r\n    })\r\n)\r\n// 当权限验证不通过的时候给出提示\r\nif (res.code === '401') {\r\n    ElementUI.Message({\r\n        message: res.msg,\r\n        type: 'error'\r\n    });\r\n}\r\n\r\nexport default request\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAGD,KAAK,CAACE,MAAM,CAAC;EACzBC,OAAO,EAAE,MAAM;EACfC,OAAO,EAAE;AACb,CAAC,CAAC;;AAEF;AACA;AACA;AACAH,OAAO,CAACI,YAAY,CAACJ,OAAO,CAACK,GAAG,CAACC,MAAM,IAAI;EACvCA,MAAM,CAACC,OAAO,CAAC,cAAc,CAAC,GAAG,gCAAgC;EACjE,IAAIC,IAAI,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,GAAEC,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC,GAAC,CAAC,CAAC;EACpF,IAAGF,IAAI,EAAC;IACJF,MAAM,CAACC,OAAO,CAAC,OAAO,CAAC,GAAGC,IAAI,CAACK,KAAK,CAAC,CAAE;EAC3C;;EAEA,OAAOP,MAAM;AACjB,CAAC,EAAEQ,KAAK,IAAI;EACR,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CAAC,CAAC;;AAEF;AACA;AACAd,OAAO,CAACI,YAAY,CAACa,QAAQ,CAACZ,GAAG,CAC7BY,QAAQ,IAAI;EACR,IAAIC,GAAG,GAAGD,QAAQ,CAACE,IAAI;EACvB;EACA,IAAIF,QAAQ,CAACX,MAAM,CAACc,YAAY,KAAK,MAAM,EAAE;IACzC,OAAOF,GAAG;EACd;EACA;EACA,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;IACzBA,GAAG,GAAGA,GAAG,GAAGP,IAAI,CAACC,KAAK,CAACM,GAAG,CAAC,GAAGA,GAAG;EACrC;EACA,OAAOA,GAAG;AACd,CAAC,EACDJ,KAAK,IAAI;EACLO,OAAO,CAACC,GAAG,CAAC,KAAK,GAAGR,KAAK,CAAC,EAAC;EAC3B,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CAAC,EAED,IAAIC,OAAO,CAAC,UAASQ,OAAO,EAAEP,MAAM,EAAE;EAClCA,MAAM,CAAC,eAAe,CAAC;AAC3B,CAAC,CAAC,CAACQ,KAAK,CAAC,UAASC,MAAM,EAAE;EACtBJ,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEG,MAAM,CAAC;AACjC,CAAC,CAAC,CACL;AACD;AACA,IAAIP,GAAG,CAACQ,IAAI,KAAK,KAAK,EAAE;EACpBC,SAAS,CAACC,OAAO,CAAC;IACdC,OAAO,EAAEX,GAAG,CAACY,GAAG;IAChBC,IAAI,EAAE;EACV,CAAC,CAAC;AACN;AAEA,eAAe/B,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}