{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { lift } from 'zrender/lib/tool/color.js';\nimport { extend, isString } from 'zrender/lib/core/util.js';\nexport default function sunburstVisual(ecModel) {\n  var paletteScope = {}; // Default color strategy\n\n  function pickColor(node, seriesModel, treeHeight) {\n    // Choose color from palette based on the first level.\n    var current = node;\n    while (current && current.depth > 1) {\n      current = current.parentNode;\n    }\n    var color = seriesModel.getColorFromPalette(current.name || current.dataIndex + '', paletteScope);\n    if (node.depth > 1 && isString(color)) {\n      // Lighter on the deeper level.\n      color = lift(color, (node.depth - 1) / (treeHeight - 1) * 0.5);\n    }\n    return color;\n  }\n  ecModel.eachSeriesByType('sunburst', function (seriesModel) {\n    var data = seriesModel.getData();\n    var tree = data.tree;\n    tree.eachNode(function (node) {\n      var model = node.getModel();\n      var style = model.getModel('itemStyle').getItemStyle();\n      if (!style.fill) {\n        style.fill = pickColor(node, seriesModel, tree.root.height);\n      }\n      var existsStyle = data.ensureUniqueItemVisual(node.dataIndex, 'style');\n      extend(existsStyle, style);\n    });\n  });\n}","map":{"version":3,"names":["lift","extend","isString","sunburstVisual","ecModel","paletteScope","pickColor","node","seriesModel","treeHeight","current","depth","parentNode","color","getColorFromPalette","name","dataIndex","eachSeriesByType","data","getData","tree","eachNode","model","getModel","style","getItemStyle","fill","root","height","existsStyle","ensureUniqueItemVisual"],"sources":["F:/VUEProject/map-project/graduation_project/project/node_modules/echarts/lib/chart/sunburst/sunburstVisual.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { lift } from 'zrender/lib/tool/color.js';\nimport { extend, isString } from 'zrender/lib/core/util.js';\nexport default function sunburstVisual(ecModel) {\n  var paletteScope = {}; // Default color strategy\n\n  function pickColor(node, seriesModel, treeHeight) {\n    // Choose color from palette based on the first level.\n    var current = node;\n\n    while (current && current.depth > 1) {\n      current = current.parentNode;\n    }\n\n    var color = seriesModel.getColorFromPalette(current.name || current.dataIndex + '', paletteScope);\n\n    if (node.depth > 1 && isString(color)) {\n      // Lighter on the deeper level.\n      color = lift(color, (node.depth - 1) / (treeHeight - 1) * 0.5);\n    }\n\n    return color;\n  }\n\n  ecModel.eachSeriesByType('sunburst', function (seriesModel) {\n    var data = seriesModel.getData();\n    var tree = data.tree;\n    tree.eachNode(function (node) {\n      var model = node.getModel();\n      var style = model.getModel('itemStyle').getItemStyle();\n\n      if (!style.fill) {\n        style.fill = pickColor(node, seriesModel, tree.root.height);\n      }\n\n      var existsStyle = data.ensureUniqueItemVisual(node.dataIndex, 'style');\n      extend(existsStyle, style);\n    });\n  });\n}"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,IAAI,QAAQ,2BAA2B;AAChD,SAASC,MAAM,EAAEC,QAAQ,QAAQ,0BAA0B;AAC3D,eAAe,SAASC,cAAcA,CAACC,OAAO,EAAE;EAC9C,IAAIC,YAAY,GAAG,CAAC,CAAC,CAAC,CAAC;;EAEvB,SAASC,SAASA,CAACC,IAAI,EAAEC,WAAW,EAAEC,UAAU,EAAE;IAChD;IACA,IAAIC,OAAO,GAAGH,IAAI;IAElB,OAAOG,OAAO,IAAIA,OAAO,CAACC,KAAK,GAAG,CAAC,EAAE;MACnCD,OAAO,GAAGA,OAAO,CAACE,UAAU;IAC9B;IAEA,IAAIC,KAAK,GAAGL,WAAW,CAACM,mBAAmB,CAACJ,OAAO,CAACK,IAAI,IAAIL,OAAO,CAACM,SAAS,GAAG,EAAE,EAAEX,YAAY,CAAC;IAEjG,IAAIE,IAAI,CAACI,KAAK,GAAG,CAAC,IAAIT,QAAQ,CAACW,KAAK,CAAC,EAAE;MACrC;MACAA,KAAK,GAAGb,IAAI,CAACa,KAAK,EAAE,CAACN,IAAI,CAACI,KAAK,GAAG,CAAC,KAAKF,UAAU,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC;IAChE;IAEA,OAAOI,KAAK;EACd;EAEAT,OAAO,CAACa,gBAAgB,CAAC,UAAU,EAAE,UAAUT,WAAW,EAAE;IAC1D,IAAIU,IAAI,GAAGV,WAAW,CAACW,OAAO,EAAE;IAChC,IAAIC,IAAI,GAAGF,IAAI,CAACE,IAAI;IACpBA,IAAI,CAACC,QAAQ,CAAC,UAAUd,IAAI,EAAE;MAC5B,IAAIe,KAAK,GAAGf,IAAI,CAACgB,QAAQ,EAAE;MAC3B,IAAIC,KAAK,GAAGF,KAAK,CAACC,QAAQ,CAAC,WAAW,CAAC,CAACE,YAAY,EAAE;MAEtD,IAAI,CAACD,KAAK,CAACE,IAAI,EAAE;QACfF,KAAK,CAACE,IAAI,GAAGpB,SAAS,CAACC,IAAI,EAAEC,WAAW,EAAEY,IAAI,CAACO,IAAI,CAACC,MAAM,CAAC;MAC7D;MAEA,IAAIC,WAAW,GAAGX,IAAI,CAACY,sBAAsB,CAACvB,IAAI,CAACS,SAAS,EAAE,OAAO,CAAC;MACtEf,MAAM,CAAC4B,WAAW,EAAEL,KAAK,CAAC;IAC5B,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}