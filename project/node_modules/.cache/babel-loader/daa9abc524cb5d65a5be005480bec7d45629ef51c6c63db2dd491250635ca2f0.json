{"ast":null,"code":"import AMapLoader from \"@amap/amap-jsapi-loader\";\nwindow._AMapSecurityConfig = {\n  // 安全密钥\n  securityJsCode: \"a289e007534e4e1ba5aee472bfb89cdc\"\n};\nexport default {\n  name: \"TestIndex\",\n  data() {\n    return {\n      // 地图实例\n      map: null,\n      // 标记点\n      marker: \"\",\n      makerP: [],\n      localData: [],\n      imgUrl: [],\n      start: [113.05477, 28.234865],\n      walking: null\n    };\n  },\n  methods: {\n    async initMap() {\n      const AMap = await AMapLoader.load({\n        // 你申请的Key\n        key: \"1220847459b1f5b9e2fccf3fff199c2a\",\n        version: \"2.0\",\n        // 需要用到的插件\n        plugins: [\"AMap.LabelMarker\", \"AMap.Walking\", \"AMap.ElasticMarker\", \"AMap.Polyline\"],\n        AMapUI: {\n          // 是否加载 AMapUI，缺省不加载\n          version: \"1.1\",\n          // AMapUI 缺省 1.1\n          plugins: [\"overlay/SimpleMarker\", \"misc/PathSimplifier\"] // 需要加载的 AMapUI ui插件\n        }\n      });\n\n      this.map = new AMap.Map(\"container\", {\n        viewMode: \"3D\",\n        zoom: 17,\n        center: [113.054669, 28.238277],\n        features: [\"bg\", \"road\"]\n      });\n      // const walking = new AMap.Walking({\n      //   map: this.map,\n      // });\n      var walkOption = {\n        map: this.map,\n        panel: \"panel\",\n        hideMarkers: false,\n        isOutline: true,\n        outlineColor: \"#ffeeee\",\n        autoFitView: true\n      };\n      const walking = new AMap.Walking(walkOption);\n      let layer = new AMap.LabelsLayer({\n        zooms: [3, 20],\n        zIndex: 1000,\n        // 开启标注避让，默认为开启，v1.4.15 新增属性\n        collision: true,\n        // 开启标注淡入动画，默认为开启，v1.4.15 新增属性\n        animation: true\n      });\n      for (let i = 0; i < this.localData.length; i++) {\n        const marker = new AMap.LabelMarker({\n          name: this.localData[i].touristname,\n          position: [this.localData[i].lng, this.localData[i].lat],\n          icon: {\n            type: \"image\",\n            image: this.localData[i].iconUrl,\n            size: [64, 64],\n            //size:[131,170],\n            anchor: \"bottom-top\",\n            angel: 0,\n            retina: true\n          },\n          text: {\n            content: this.localData[i].touristname,\n            zooms: [18, 19, 20],\n            direction: \"top\",\n            offset: [0, 0],\n            style: {\n              fontSize: 13,\n              fontWeight: \"normal\",\n              fillColor: \"#fff\",\n              padding: \"2, 5\",\n              backgroundColor: \"#22884f\"\n            }\n          }\n        });\n        layer.add(marker);\n        this.map.add(marker);\n        marker.on(\"click\", () => {\n          const infoWindowContent = document.createElement(\"div\");\n          infoWindowContent.style.width = \"300px\";\n          infoWindowContent.style.height = \"200px\";\n\n          // 添加标题\n          const title = document.createElement(\"h3\");\n          title.style.margin = \"0\";\n          title.style.padding = \"10px\";\n          title.style.backgroundColor = \"#f00\";\n          title.style.color = \"#fff\";\n          title.textContent = this.localData[i].touristname;\n          infoWindowContent.appendChild(title);\n\n          // 添加图片\n          const img = document.createElement(\"img\");\n          img.style.width = \"100%\";\n          img.style.height = \"100%\";\n          img.style.objectFit = \"cover\";\n          img.src = this.localData[i].imgUrl;\n          infoWindowContent.appendChild(img);\n\n          // 创建按钮\n          const button = document.createElement(\"button\");\n          button.textContent = \"到这\";\n\n          // 为按钮添加点击事件\n          button.addEventListener(\"click\", () => {\n            // 在这里编写按钮的点击事件处理逻辑\n            // 例如：获取该图标的经纬度\n\n            const position = marker.getPosition();\n            console.log(position);\n            console.log(position.lng);\n            console.log(position.lat);\n            const end = [position.lng, position.lat];\n            this.start = [113.05477, 28.234865];\n            if (walking) {\n              walking.clear();\n            }\n            // 步行导航\n\n            walking.search(this.start, end, (status, result) => {\n              if (status === \"complete\" && result.info === \"OK\") {\n                // 绘制路线\n\n                this.walkingRoute = result.routes[0];\n                const path = this.walkingRoute.path.map(p => [p.lng, p.lat]);\n                const polyline = new AMap.Polyline({\n                  map: this.map,\n                  path,\n                  showDir: true,\n                  strokeColor: \"#28F\",\n                  strokeWeight: 6,\n                  strokeOpacity: 0.8\n                });\n                this.polyline = polyline;\n                this.map.add(polyline);\n              }\n            });\n          });\n\n          // 将按钮添加到信息窗口中\n          infoWindowContent.appendChild(button);\n\n          // 创建信息窗口\n          const infoWindow = new AMap.InfoWindow({\n            content: infoWindowContent,\n            offset: new AMap.Pixel(0, -30)\n          });\n\n          // 显示信息窗口\n          infoWindow.open(this.map, marker.getPosition());\n        });\n        marker.on(\"mouseover\", () => {\n          // marker.setOffset(new AMap.Pixel(-10, -10));\n          marker.setIcon({\n            type: \"image\",\n            image: this.localData[i].iconUrl,\n            size: [84, 84],\n            anchor: \"bottom-center\",\n            angel: 0,\n            retina: true\n          });\n        });\n        marker.on(\"mouseout\", () => {\n          // marker.setOffset(new AMap.Pixel(0, 0));\n          marker.setIcon({\n            type: \"image\",\n            image: this.localData[i].iconUrl,\n            size: [64, 64],\n            anchor: \"bottom-top\",\n            angel: 0,\n            retina: true\n          });\n        });\n      }\n    },\n    load() {\n      this.request.get(\"http://localhost:9090/spot\").then(res => {\n        console.log(res);\n        this.localData = res;\n      });\n      this.window.load();\n    },\n    clearRoute() {\n      if (this.polyline != null) {\n        this.polyline.setMap(null);\n        this.polyline = null;\n        this.walkingRoute = null;\n        this.walking.clear(); // 清除步行路线规划结果\n      }\n    }\n  },\n\n  mounted() {\n    this.initMap();\n    this.load();\n  },\n  created() {}\n};","map":{"version":3,"names":["AMapLoader","window","_AMapSecurityConfig","securityJsCode","name","data","map","marker","makerP","localData","imgUrl","start","walking","methods","initMap","AMap","load","key","version","plugins","AMapUI","Map","viewMode","zoom","center","features","walkOption","panel","hideMarkers","isOutline","outlineColor","autoFitView","Walking","layer","LabelsLayer","zooms","zIndex","collision","animation","i","length","LabelMarker","touristname","position","lng","lat","icon","type","image","iconUrl","size","anchor","angel","retina","text","content","direction","offset","style","fontSize","fontWeight","fillColor","padding","backgroundColor","add","on","infoWindowContent","document","createElement","width","height","title","margin","color","textContent","appendChild","img","objectFit","src","button","addEventListener","getPosition","console","log","end","clear","search","status","result","info","walkingRoute","routes","path","p","polyline","Polyline","showDir","strokeColor","strokeWeight","strokeOpacity","infoWindow","InfoWindow","Pixel","open","setIcon","request","get","then","res","clearRoute","setMap","mounted","created"],"sources":["src/views/ClientView/Spot.vue"],"sourcesContent":["<template>\r\n  <div class=\"facontainer\">\r\n    <div id=\"container\" class=\"container\" >\r\n<!--      <div id=\"panel\"></div>-->\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport AMapLoader from \"@amap/amap-jsapi-loader\";\r\n\r\nwindow._AMapSecurityConfig = {\r\n  // 安全密钥\r\n  securityJsCode: \"a289e007534e4e1ba5aee472bfb89cdc\",\r\n};\r\n\r\nexport default {\r\n  name: \"TestIndex\",\r\n  data() {\r\n    return {\r\n      // 地图实例\r\n      map: null,\r\n      // 标记点\r\n      marker: \"\",\r\n      makerP: [],\r\n      localData: [],\r\n      imgUrl: [],\r\n      start: [113.05477, 28.234865],\r\n      walking: null,\r\n    };\r\n  },\r\n  methods: {\r\n    async initMap() {\r\n      const AMap = await AMapLoader.load({\r\n        // 你申请的Key\r\n        key: \"1220847459b1f5b9e2fccf3fff199c2a\",\r\n        version: \"2.0\",\r\n        // 需要用到的插件\r\n        plugins: [\r\n          \"AMap.LabelMarker\",\r\n          \"AMap.Walking\",\r\n          \"AMap.ElasticMarker\",\r\n          \"AMap.Polyline\",\r\n        ],\r\n        AMapUI: {\r\n          // 是否加载 AMapUI，缺省不加载\r\n          version: \"1.1\", // AMapUI 缺省 1.1\r\n          plugins: [\"overlay/SimpleMarker\", \"misc/PathSimplifier\"], // 需要加载的 AMapUI ui插件\r\n        },\r\n      });\r\n\r\n      this.map = new AMap.Map(\"container\", {\r\n        viewMode: \"3D\",\r\n        zoom: 17,\r\n        center: [113.054669, 28.238277],\r\n        features: [\"bg\", \"road\"],\r\n      });\r\n      // const walking = new AMap.Walking({\r\n      //   map: this.map,\r\n      // });\r\n      var walkOption = {\r\n        map: this.map,\r\n        panel: \"panel\",\r\n        hideMarkers: false,\r\n        isOutline: true,\r\n        outlineColor: \"#ffeeee\",\r\n        autoFitView: true,\r\n      };\r\n\r\n      const walking = new AMap.Walking(walkOption);\r\n\r\n      let layer = new AMap.LabelsLayer({\r\n        zooms: [3, 20],\r\n        zIndex: 1000,\r\n        // 开启标注避让，默认为开启，v1.4.15 新增属性\r\n        collision: true,\r\n        // 开启标注淡入动画，默认为开启，v1.4.15 新增属性\r\n        animation: true,\r\n      });\r\n      for (let i = 0; i < this.localData.length; i++) {\r\n        const marker = new AMap.LabelMarker({\r\n          name: this.localData[i].touristname,\r\n          position: [this.localData[i].lng, this.localData[i].lat],\r\n          icon: {\r\n            type: \"image\",\r\n            image: this.localData[i].iconUrl,\r\n\r\n            size: [64, 64],\r\n            //size:[131,170],\r\n            anchor: \"bottom-top\",\r\n            angel: 0,\r\n            retina: true,\r\n          },\r\n          text: {\r\n            content: this.localData[i].touristname,\r\n            zooms: [18, 19, 20],\r\n            direction: \"top\",\r\n            offset: [0, 0],\r\n            style: {\r\n              fontSize: 13,\r\n              fontWeight: \"normal\",\r\n              fillColor: \"#fff\",\r\n              padding: \"2, 5\",\r\n              backgroundColor: \"#22884f\",\r\n            },\r\n          },\r\n        });\r\n        layer.add(marker);\r\n\r\n        this.map.add(marker);\r\n\r\n        marker.on(\"click\", () => {\r\n          const infoWindowContent = document.createElement(\"div\");\r\n          infoWindowContent.style.width = \"300px\";\r\n          infoWindowContent.style.height = \"200px\";\r\n\r\n          // 添加标题\r\n          const title = document.createElement(\"h3\");\r\n          title.style.margin = \"0\";\r\n          title.style.padding = \"10px\";\r\n          title.style.backgroundColor = \"#f00\";\r\n          title.style.color = \"#fff\";\r\n          title.textContent = this.localData[i].touristname;\r\n          infoWindowContent.appendChild(title);\r\n\r\n          // 添加图片\r\n          const img = document.createElement(\"img\");\r\n          img.style.width = \"100%\";\r\n          img.style.height = \"100%\";\r\n          img.style.objectFit = \"cover\";\r\n          img.src = this.localData[i].imgUrl;\r\n          infoWindowContent.appendChild(img);\r\n\r\n          // 创建按钮\r\n          const button = document.createElement(\"button\");\r\n          button.textContent = \"到这\";\r\n\r\n          // 为按钮添加点击事件\r\n          button.addEventListener(\"click\", () => {\r\n            // 在这里编写按钮的点击事件处理逻辑\r\n            // 例如：获取该图标的经纬度\r\n\r\n            const position = marker.getPosition();\r\n\r\n            console.log(position);\r\n            console.log(position.lng);\r\n            console.log(position.lat);\r\n            const end = [position.lng, position.lat];\r\n            this.start = [113.05477, 28.234865];\r\n\r\n            if (walking) {\r\n              walking.clear();\r\n            }\r\n            // 步行导航\r\n\r\n            walking.search(this.start, end, (status, result) => {\r\n              if (status === \"complete\" && result.info === \"OK\") {\r\n                // 绘制路线\r\n\r\n                this.walkingRoute = result.routes[0];\r\n                const path = this.walkingRoute.path.map((p) => [p.lng, p.lat]);\r\n                const polyline = new AMap.Polyline({\r\n                  map: this.map,\r\n                  path,\r\n                  showDir: true,\r\n                  strokeColor: \"#28F\",\r\n                  strokeWeight: 6,\r\n                  strokeOpacity: 0.8,\r\n                });\r\n                this.polyline = polyline;\r\n                this.map.add(polyline);\r\n              }\r\n            });\r\n          });\r\n\r\n          // 将按钮添加到信息窗口中\r\n          infoWindowContent.appendChild(button);\r\n\r\n          // 创建信息窗口\r\n          const infoWindow = new AMap.InfoWindow({\r\n            content: infoWindowContent,\r\n            offset: new AMap.Pixel(0, -30),\r\n          });\r\n\r\n          // 显示信息窗口\r\n          infoWindow.open(this.map, marker.getPosition());\r\n        });\r\n\r\n        marker.on(\"mouseover\", () => {\r\n          // marker.setOffset(new AMap.Pixel(-10, -10));\r\n          marker.setIcon({\r\n            type: \"image\",\r\n            image: this.localData[i].iconUrl,\r\n            size: [84, 84],\r\n            anchor: \"bottom-center\",\r\n            angel: 0,\r\n            retina: true,\r\n          });\r\n        });\r\n\r\n        marker.on(\"mouseout\", () => {\r\n          // marker.setOffset(new AMap.Pixel(0, 0));\r\n          marker.setIcon({\r\n            type: \"image\",\r\n            image: this.localData[i].iconUrl,\r\n            size: [64, 64],\r\n            anchor: \"bottom-top\",\r\n            angel: 0,\r\n            retina: true,\r\n          });\r\n        });\r\n      }\r\n    },\r\n    load() {\r\n      this.request.get(\"http://localhost:9090/spot\").then((res) => {\r\n        console.log(res);\r\n        this.localData = res;\r\n      });\r\n      this.window.load()\r\n    },\r\n    clearRoute() {\r\n      if (this.polyline != null) {\r\n        this.polyline.setMap(null);\r\n        this.polyline = null;\r\n        this.walkingRoute = null;\r\n        this.walking.clear(); // 清除步行路线规划结果\r\n      }\r\n    },\r\n  },\r\n\r\n  mounted() {\r\n    this.initMap();\r\n    this.load();\r\n\r\n  },\r\n  created() {},\r\n};\r\n</script>\r\n<style>\r\n.container {\r\n  width: 1200px;\r\n  height: 900px;\r\n\r\n  display: inline-block; /* 设置子元素为 inline-block */\r\n}\r\n#panel {\r\n  position: fixed;\r\n  background-color: white;\r\n  max-height: 90%;\r\n  overflow-y: auto;\r\n  top: 10px;\r\n  right: 10px;\r\n  width: 280px;\r\n  padding-top: 90px;\r\n}\r\n#panel .amap-call {\r\n  background-color: #009cf9;\r\n  border-top-left-radius: 50px;\r\n  border-top-right-radius: 4px;\r\n\r\n}\r\n#panel .amap-lib-walking {\r\n  border-bottom-left-radius: 4px;\r\n  border-bottom-right-radius: 4px;\r\n  overflow: hidden;\r\n}\r\n.facontainer{\r\n  margin-top: 5px;\r\n  text-align: center; /* 设置父元素 text-align 属性为 center */\r\n}\r\n</style>\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}