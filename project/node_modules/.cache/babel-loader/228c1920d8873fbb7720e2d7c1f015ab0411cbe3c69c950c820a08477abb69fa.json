{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { assert, isArray, eqNaN, isFunction } from 'zrender/lib/core/util.js';\nimport { parsePercent } from 'zrender/lib/contain/text.js';\nvar ScaleRawExtentInfo = /** @class */\nfunction () {\n  function ScaleRawExtentInfo(scale, model,\n  // Usually: data extent from all series on this axis.\n  originalExtent) {\n    this._prepareParams(scale, model, originalExtent);\n  }\n  /**\n   * Parameters depending on outside (like model, user callback)\n   * are prepared and fixed here.\n   */\n\n  ScaleRawExtentInfo.prototype._prepareParams = function (scale, model,\n  // Usually: data extent from all series on this axis.\n  dataExtent) {\n    if (dataExtent[1] < dataExtent[0]) {\n      dataExtent = [NaN, NaN];\n    }\n    this._dataMin = dataExtent[0];\n    this._dataMax = dataExtent[1];\n    var isOrdinal = this._isOrdinal = scale.type === 'ordinal';\n    this._needCrossZero = scale.type === 'interval' && model.getNeedCrossZero && model.getNeedCrossZero();\n    var modelMinRaw = this._modelMinRaw = model.get('min', true);\n    if (isFunction(modelMinRaw)) {\n      // This callback always provides users the full data extent (before data is filtered).\n      this._modelMinNum = parseAxisModelMinMax(scale, modelMinRaw({\n        min: dataExtent[0],\n        max: dataExtent[1]\n      }));\n    } else if (modelMinRaw !== 'dataMin') {\n      this._modelMinNum = parseAxisModelMinMax(scale, modelMinRaw);\n    }\n    var modelMaxRaw = this._modelMaxRaw = model.get('max', true);\n    if (isFunction(modelMaxRaw)) {\n      // This callback always provides users the full data extent (before data is filtered).\n      this._modelMaxNum = parseAxisModelMinMax(scale, modelMaxRaw({\n        min: dataExtent[0],\n        max: dataExtent[1]\n      }));\n    } else if (modelMaxRaw !== 'dataMax') {\n      this._modelMaxNum = parseAxisModelMinMax(scale, modelMaxRaw);\n    }\n    if (isOrdinal) {\n      // FIXME: there is a flaw here: if there is no \"block\" data processor like `dataZoom`,\n      // and progressive rendering is using, here the category result might just only contain\n      // the processed chunk rather than the entire result.\n      this._axisDataLen = model.getCategories().length;\n    } else {\n      var boundaryGap = model.get('boundaryGap');\n      var boundaryGapArr = isArray(boundaryGap) ? boundaryGap : [boundaryGap || 0, boundaryGap || 0];\n      if (typeof boundaryGapArr[0] === 'boolean' || typeof boundaryGapArr[1] === 'boolean') {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn('Boolean type for boundaryGap is only ' + 'allowed for ordinal axis. Please use string in ' + 'percentage instead, e.g., \"20%\". Currently, ' + 'boundaryGap is set to be 0.');\n        }\n        this._boundaryGapInner = [0, 0];\n      } else {\n        this._boundaryGapInner = [parsePercent(boundaryGapArr[0], 1), parsePercent(boundaryGapArr[1], 1)];\n      }\n    }\n  };\n  /**\n   * Calculate extent by prepared parameters.\n   * This method has no external dependency and can be called duplicatedly,\n   * getting the same result.\n   * If parameters changed, should call this method to recalcuate.\n   */\n\n  ScaleRawExtentInfo.prototype.calculate = function () {\n    // Notice: When min/max is not set (that is, when there are null/undefined,\n    // which is the most common case), these cases should be ensured:\n    // (1) For 'ordinal', show all axis.data.\n    // (2) For others:\n    //      + `boundaryGap` is applied (if min/max set, boundaryGap is\n    //      disabled).\n    //      + If `needCrossZero`, min/max should be zero, otherwise, min/max should\n    //      be the result that originalExtent enlarged by boundaryGap.\n    // (3) If no data, it should be ensured that `scale.setBlank` is set.\n    var isOrdinal = this._isOrdinal;\n    var dataMin = this._dataMin;\n    var dataMax = this._dataMax;\n    var axisDataLen = this._axisDataLen;\n    var boundaryGapInner = this._boundaryGapInner;\n    var span = !isOrdinal ? dataMax - dataMin || Math.abs(dataMin) : null; // Currently if a `'value'` axis model min is specified as 'dataMin'/'dataMax',\n    // `boundaryGap` will not be used. It's the different from specifying as `null`/`undefined`.\n\n    var min = this._modelMinRaw === 'dataMin' ? dataMin : this._modelMinNum;\n    var max = this._modelMaxRaw === 'dataMax' ? dataMax : this._modelMaxNum; // If `_modelMinNum`/`_modelMaxNum` is `null`/`undefined`, should not be fixed.\n\n    var minFixed = min != null;\n    var maxFixed = max != null;\n    if (min == null) {\n      min = isOrdinal ? axisDataLen ? 0 : NaN : dataMin - boundaryGapInner[0] * span;\n    }\n    if (max == null) {\n      max = isOrdinal ? axisDataLen ? axisDataLen - 1 : NaN : dataMax + boundaryGapInner[1] * span;\n    }\n    (min == null || !isFinite(min)) && (min = NaN);\n    (max == null || !isFinite(max)) && (max = NaN);\n    var isBlank = eqNaN(min) || eqNaN(max) || isOrdinal && !axisDataLen; // If data extent modified, need to recalculated to ensure cross zero.\n\n    if (this._needCrossZero) {\n      // Axis is over zero and min is not set\n      if (min > 0 && max > 0 && !minFixed) {\n        min = 0; // minFixed = true;\n      } // Axis is under zero and max is not set\n\n      if (min < 0 && max < 0 && !maxFixed) {\n        max = 0; // maxFixed = true;\n      } // PENDING:\n      // When `needCrossZero` and all data is positive/negative, should it be ensured\n      // that the results processed by boundaryGap are positive/negative?\n      // If so, here `minFixed`/`maxFixed` need to be set.\n    }\n\n    var determinedMin = this._determinedMin;\n    var determinedMax = this._determinedMax;\n    if (determinedMin != null) {\n      min = determinedMin;\n      minFixed = true;\n    }\n    if (determinedMax != null) {\n      max = determinedMax;\n      maxFixed = true;\n    } // Ensure min/max be finite number or NaN here. (not to be null/undefined)\n    // `NaN` means min/max axis is blank.\n\n    return {\n      min: min,\n      max: max,\n      minFixed: minFixed,\n      maxFixed: maxFixed,\n      isBlank: isBlank\n    };\n  };\n  ScaleRawExtentInfo.prototype.modifyDataMinMax = function (minMaxName, val) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert(!this.frozen);\n    }\n    this[DATA_MIN_MAX_ATTR[minMaxName]] = val;\n  };\n  ScaleRawExtentInfo.prototype.setDeterminedMinMax = function (minMaxName, val) {\n    var attr = DETERMINED_MIN_MAX_ATTR[minMaxName];\n    if (process.env.NODE_ENV !== 'production') {\n      assert(!this.frozen // Earse them usually means logic flaw.\n      && this[attr] == null);\n    }\n    this[attr] = val;\n  };\n  ScaleRawExtentInfo.prototype.freeze = function () {\n    // @ts-ignore\n    this.frozen = true;\n  };\n  return ScaleRawExtentInfo;\n}();\nexport { ScaleRawExtentInfo };\nvar DETERMINED_MIN_MAX_ATTR = {\n  min: '_determinedMin',\n  max: '_determinedMax'\n};\nvar DATA_MIN_MAX_ATTR = {\n  min: '_dataMin',\n  max: '_dataMax'\n};\n/**\n * Get scale min max and related info only depends on model settings.\n * This method can be called after coordinate system created.\n * For example, in data processing stage.\n *\n * Scale extent info probably be required multiple times during a workflow.\n * For example:\n * (1) `dataZoom` depends it to get the axis extent in \"100%\" state.\n * (2) `processor/extentCalculator` depends it to make sure whether axis extent is specified.\n * (3) `coordSys.update` use it to finally decide the scale extent.\n * But the callback of `min`/`max` should not be called multiple times.\n * The code below should not be implemented repeatedly either.\n * So we cache the result in the scale instance, which will be recreated at the beginning\n * of the workflow (because `scale` instance will be recreated each round of the workflow).\n */\n\nexport function ensureScaleRawExtentInfo(scale, model,\n// Usually: data extent from all series on this axis.\noriginalExtent) {\n  // Do not permit to recreate.\n  var rawExtentInfo = scale.rawExtentInfo;\n  if (rawExtentInfo) {\n    return rawExtentInfo;\n  }\n  rawExtentInfo = new ScaleRawExtentInfo(scale, model, originalExtent); // @ts-ignore\n\n  scale.rawExtentInfo = rawExtentInfo;\n  return rawExtentInfo;\n}\nexport function parseAxisModelMinMax(scale, minMax) {\n  return minMax == null ? null : eqNaN(minMax) ? NaN : scale.parse(minMax);\n}","map":{"version":3,"names":["assert","isArray","eqNaN","isFunction","parsePercent","ScaleRawExtentInfo","scale","model","originalExtent","_prepareParams","prototype","dataExtent","NaN","_dataMin","_dataMax","isOrdinal","_isOrdinal","type","_needCrossZero","getNeedCrossZero","modelMinRaw","_modelMinRaw","get","_modelMinNum","parseAxisModelMinMax","min","max","modelMaxRaw","_modelMaxRaw","_modelMaxNum","_axisDataLen","getCategories","length","boundaryGap","boundaryGapArr","process","env","NODE_ENV","console","warn","_boundaryGapInner","calculate","dataMin","dataMax","axisDataLen","boundaryGapInner","span","Math","abs","minFixed","maxFixed","isFinite","isBlank","determinedMin","_determinedMin","determinedMax","_determinedMax","modifyDataMinMax","minMaxName","val","frozen","DATA_MIN_MAX_ATTR","setDeterminedMinMax","attr","DETERMINED_MIN_MAX_ATTR","freeze","ensureScaleRawExtentInfo","rawExtentInfo","minMax","parse"],"sources":["F:/VUEProject/map-project/design_4/project/node_modules/echarts/lib/coord/scaleRawExtentInfo.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { assert, isArray, eqNaN, isFunction } from 'zrender/lib/core/util.js';\nimport { parsePercent } from 'zrender/lib/contain/text.js';\n\nvar ScaleRawExtentInfo =\n/** @class */\nfunction () {\n  function ScaleRawExtentInfo(scale, model, // Usually: data extent from all series on this axis.\n  originalExtent) {\n    this._prepareParams(scale, model, originalExtent);\n  }\n  /**\n   * Parameters depending on outside (like model, user callback)\n   * are prepared and fixed here.\n   */\n\n\n  ScaleRawExtentInfo.prototype._prepareParams = function (scale, model, // Usually: data extent from all series on this axis.\n  dataExtent) {\n    if (dataExtent[1] < dataExtent[0]) {\n      dataExtent = [NaN, NaN];\n    }\n\n    this._dataMin = dataExtent[0];\n    this._dataMax = dataExtent[1];\n    var isOrdinal = this._isOrdinal = scale.type === 'ordinal';\n    this._needCrossZero = scale.type === 'interval' && model.getNeedCrossZero && model.getNeedCrossZero();\n    var modelMinRaw = this._modelMinRaw = model.get('min', true);\n\n    if (isFunction(modelMinRaw)) {\n      // This callback always provides users the full data extent (before data is filtered).\n      this._modelMinNum = parseAxisModelMinMax(scale, modelMinRaw({\n        min: dataExtent[0],\n        max: dataExtent[1]\n      }));\n    } else if (modelMinRaw !== 'dataMin') {\n      this._modelMinNum = parseAxisModelMinMax(scale, modelMinRaw);\n    }\n\n    var modelMaxRaw = this._modelMaxRaw = model.get('max', true);\n\n    if (isFunction(modelMaxRaw)) {\n      // This callback always provides users the full data extent (before data is filtered).\n      this._modelMaxNum = parseAxisModelMinMax(scale, modelMaxRaw({\n        min: dataExtent[0],\n        max: dataExtent[1]\n      }));\n    } else if (modelMaxRaw !== 'dataMax') {\n      this._modelMaxNum = parseAxisModelMinMax(scale, modelMaxRaw);\n    }\n\n    if (isOrdinal) {\n      // FIXME: there is a flaw here: if there is no \"block\" data processor like `dataZoom`,\n      // and progressive rendering is using, here the category result might just only contain\n      // the processed chunk rather than the entire result.\n      this._axisDataLen = model.getCategories().length;\n    } else {\n      var boundaryGap = model.get('boundaryGap');\n      var boundaryGapArr = isArray(boundaryGap) ? boundaryGap : [boundaryGap || 0, boundaryGap || 0];\n\n      if (typeof boundaryGapArr[0] === 'boolean' || typeof boundaryGapArr[1] === 'boolean') {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn('Boolean type for boundaryGap is only ' + 'allowed for ordinal axis. Please use string in ' + 'percentage instead, e.g., \"20%\". Currently, ' + 'boundaryGap is set to be 0.');\n        }\n\n        this._boundaryGapInner = [0, 0];\n      } else {\n        this._boundaryGapInner = [parsePercent(boundaryGapArr[0], 1), parsePercent(boundaryGapArr[1], 1)];\n      }\n    }\n  };\n  /**\n   * Calculate extent by prepared parameters.\n   * This method has no external dependency and can be called duplicatedly,\n   * getting the same result.\n   * If parameters changed, should call this method to recalcuate.\n   */\n\n\n  ScaleRawExtentInfo.prototype.calculate = function () {\n    // Notice: When min/max is not set (that is, when there are null/undefined,\n    // which is the most common case), these cases should be ensured:\n    // (1) For 'ordinal', show all axis.data.\n    // (2) For others:\n    //      + `boundaryGap` is applied (if min/max set, boundaryGap is\n    //      disabled).\n    //      + If `needCrossZero`, min/max should be zero, otherwise, min/max should\n    //      be the result that originalExtent enlarged by boundaryGap.\n    // (3) If no data, it should be ensured that `scale.setBlank` is set.\n    var isOrdinal = this._isOrdinal;\n    var dataMin = this._dataMin;\n    var dataMax = this._dataMax;\n    var axisDataLen = this._axisDataLen;\n    var boundaryGapInner = this._boundaryGapInner;\n    var span = !isOrdinal ? dataMax - dataMin || Math.abs(dataMin) : null; // Currently if a `'value'` axis model min is specified as 'dataMin'/'dataMax',\n    // `boundaryGap` will not be used. It's the different from specifying as `null`/`undefined`.\n\n    var min = this._modelMinRaw === 'dataMin' ? dataMin : this._modelMinNum;\n    var max = this._modelMaxRaw === 'dataMax' ? dataMax : this._modelMaxNum; // If `_modelMinNum`/`_modelMaxNum` is `null`/`undefined`, should not be fixed.\n\n    var minFixed = min != null;\n    var maxFixed = max != null;\n\n    if (min == null) {\n      min = isOrdinal ? axisDataLen ? 0 : NaN : dataMin - boundaryGapInner[0] * span;\n    }\n\n    if (max == null) {\n      max = isOrdinal ? axisDataLen ? axisDataLen - 1 : NaN : dataMax + boundaryGapInner[1] * span;\n    }\n\n    (min == null || !isFinite(min)) && (min = NaN);\n    (max == null || !isFinite(max)) && (max = NaN);\n    var isBlank = eqNaN(min) || eqNaN(max) || isOrdinal && !axisDataLen; // If data extent modified, need to recalculated to ensure cross zero.\n\n    if (this._needCrossZero) {\n      // Axis is over zero and min is not set\n      if (min > 0 && max > 0 && !minFixed) {\n        min = 0; // minFixed = true;\n      } // Axis is under zero and max is not set\n\n\n      if (min < 0 && max < 0 && !maxFixed) {\n        max = 0; // maxFixed = true;\n      } // PENDING:\n      // When `needCrossZero` and all data is positive/negative, should it be ensured\n      // that the results processed by boundaryGap are positive/negative?\n      // If so, here `minFixed`/`maxFixed` need to be set.\n\n    }\n\n    var determinedMin = this._determinedMin;\n    var determinedMax = this._determinedMax;\n\n    if (determinedMin != null) {\n      min = determinedMin;\n      minFixed = true;\n    }\n\n    if (determinedMax != null) {\n      max = determinedMax;\n      maxFixed = true;\n    } // Ensure min/max be finite number or NaN here. (not to be null/undefined)\n    // `NaN` means min/max axis is blank.\n\n\n    return {\n      min: min,\n      max: max,\n      minFixed: minFixed,\n      maxFixed: maxFixed,\n      isBlank: isBlank\n    };\n  };\n\n  ScaleRawExtentInfo.prototype.modifyDataMinMax = function (minMaxName, val) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert(!this.frozen);\n    }\n\n    this[DATA_MIN_MAX_ATTR[minMaxName]] = val;\n  };\n\n  ScaleRawExtentInfo.prototype.setDeterminedMinMax = function (minMaxName, val) {\n    var attr = DETERMINED_MIN_MAX_ATTR[minMaxName];\n\n    if (process.env.NODE_ENV !== 'production') {\n      assert(!this.frozen // Earse them usually means logic flaw.\n      && this[attr] == null);\n    }\n\n    this[attr] = val;\n  };\n\n  ScaleRawExtentInfo.prototype.freeze = function () {\n    // @ts-ignore\n    this.frozen = true;\n  };\n\n  return ScaleRawExtentInfo;\n}();\n\nexport { ScaleRawExtentInfo };\nvar DETERMINED_MIN_MAX_ATTR = {\n  min: '_determinedMin',\n  max: '_determinedMax'\n};\nvar DATA_MIN_MAX_ATTR = {\n  min: '_dataMin',\n  max: '_dataMax'\n};\n/**\n * Get scale min max and related info only depends on model settings.\n * This method can be called after coordinate system created.\n * For example, in data processing stage.\n *\n * Scale extent info probably be required multiple times during a workflow.\n * For example:\n * (1) `dataZoom` depends it to get the axis extent in \"100%\" state.\n * (2) `processor/extentCalculator` depends it to make sure whether axis extent is specified.\n * (3) `coordSys.update` use it to finally decide the scale extent.\n * But the callback of `min`/`max` should not be called multiple times.\n * The code below should not be implemented repeatedly either.\n * So we cache the result in the scale instance, which will be recreated at the beginning\n * of the workflow (because `scale` instance will be recreated each round of the workflow).\n */\n\nexport function ensureScaleRawExtentInfo(scale, model, // Usually: data extent from all series on this axis.\noriginalExtent) {\n  // Do not permit to recreate.\n  var rawExtentInfo = scale.rawExtentInfo;\n\n  if (rawExtentInfo) {\n    return rawExtentInfo;\n  }\n\n  rawExtentInfo = new ScaleRawExtentInfo(scale, model, originalExtent); // @ts-ignore\n\n  scale.rawExtentInfo = rawExtentInfo;\n  return rawExtentInfo;\n}\nexport function parseAxisModelMinMax(scale, minMax) {\n  return minMax == null ? null : eqNaN(minMax) ? NaN : scale.parse(minMax);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}